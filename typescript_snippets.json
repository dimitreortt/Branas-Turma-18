{
	// Place your snippets for typescript here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// },
	"earf": {
		"prefix": "earf",
		"body": [
			"export const ${1} = ($2) => {",
			"	$3",
			"}\n"
		]
	},
	"arf": {
		"prefix": "arf",
		"body": [
			"const ${1} = ($2) => {",
			"	$3",
			"}\n"
		]
	},
    "export class": {
        "prefix": "ecl",
		"body": [
			"export class ${TM_FILENAME_BASE} {",
			"    constructor($1) { }",
			"}\n"
		]
    },
    "export class extends ": {
        "prefix": "ecle",
		"body": [
			"export class ${TM_FILENAME_BASE} extends $1 {",
			"    constructor($2) {",
            "        super($2);",
            "    }",
			"}\n"
		]
    },
    "export class implements ": {
        "prefix": "ecli",
		"body": [
			"export class ${TM_FILENAME_BASE} implements $1 {",
			"    constructor($2) {",
            "    }",
			"}\n"
		]
    },
    "ein": {
        "prefix": "ein",
		"body": [
			"export interface ${TM_FILENAME_BASE} {",
			"\t$1",
			"}\n"
		]
    },
    "mockdb": {
        "prefix": "mockdb",
        "body": [
            // "import { DatabaseMock } from \"../mocks/DatabaseMock\"",
            "",
            "let database: DatabaseMock",
            "",
            "beforeAll(async () => {",
            "   database = await new DatabaseMock$1().build()",
            "})"
        ]
    },
    "its": {
        "prefix": "its",
        "body": [
            "it(\"should $1\", async () => {",
            "   $2",
            "})"
        ]
    },
    "expid": {
        "prefix": "expid",
        "body": "expect($1).toHaveProperty('$2')"
    },
    "exnul": {
        "prefix": "exnul",
        "body": "expect($1).toBeNull()"
    }
}    
    